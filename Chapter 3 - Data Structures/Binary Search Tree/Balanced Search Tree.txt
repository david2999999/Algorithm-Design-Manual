Balance Search Trees
    - Random search trees are usually good, but if we get unlucky with our order of insertion, we can end up with a linear-height tree
    - What if we adjust the tree a little after each insertion
        - Balanced binary search tree data structures have been developed to guarantee the height of the tree always to be O(logn)
            - Therefore all of the dictionary operations (insert, delete, query) takes O(logn)
    - Tree implementation includes
        - red black trees
        - splay trees

Problems:
    Problem: You are given the task of reading n numbers and then printing them
        out in sorted order. Suppose you have access to a balanced dictionary data structure,
        which supports the operations search, insert, delete, minimum, maximum,
        successor, and predecessor each in O(log n) time.

    1. How can you sort in O(n log n) time using only insert and in-order traversal?
        - We will first initialize our tree
        - While !(end of file)
            - read a number
            - insert the number into our tree
        - Do a in order traversal. Left -> mid -> right
            - left < mid < right
        - What is the time complexity? O(nlogn) + O(n) = O(nlogn)
            - O(nlogn) - we have n numbers and have to insert each of them into our tree with a runtime of O(logn)
            - O(n) - in order traversal of tree

    2. How can you sort in O(n log n) time using only minimum, successor, and insert?
        - We will first initialize our tree
        - While we have not finish reading the numbers
            - read a number
            - insert the number into our tree
        - retrieve our minimum value as our current node(left most position in our tree)
        - While our current node is not null
            - traverse the tree using successor
        - What is the time complexity? O(nlogn) + O(logn) + O(nlogn) = O(nlogn)
            - O(nlogn) = reading n numbers and insert them into our tree O(nlogn)
            - O(logn) = retrieving our minimum value on the leftmost position
            - O(nlogn) = continuously calling successor on n nodes

    3. How can you sort in O(n log n) time using only minimum, insert, delete, search?
        - We will initialize our tree
        - While we have not finish reading the numbers
            - read a number
            - insert the number into our tree
        - Retrieve the minimum value as our current node (leftmost position in our tree)
        - While our current node is not null
            - Print our current node
            - Delete our current node (this will update our minimum value in the tree)
            - Set our current node to the new minimum
        - What is the time complexity? O(nlogn) + O(logn) + O(n(logn + logn)) = O(nlogn)
            - O(nlogn) - reading n numbers and inserting each number into our tree
            - O(logn) - finding the minimum value as our current node
            - O(n(logn + logn)) = For each of the elements, we delete our minimum node, and then update to a new minimum node

Gotchas
    - Picking the wrong data structure for the job can be disastrous in terms of performance
        - Identifying the best data structure is usually not as critical, because there can be several choices that perform similarly

