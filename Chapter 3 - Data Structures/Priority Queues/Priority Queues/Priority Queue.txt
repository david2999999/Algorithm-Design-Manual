Priority Queues
    - Many algorithms process items in a specific order
        - Suppose you must schedule jobs according to their importance relative to other jobs
        - Scheduling jobs requires sorting them by importance
    - Priority queues provide more flexibility than simple sorting
        - they allow new elements to enter a system at arbitrary intervals
        - It is more cost effective to insert a new job into a priority queue than to re-sort everything every arrival
    - The basic priority queue supports three primary operations
        - insert an item with key k
        - Find minimum/maximum
        - Delete minimum/maximum

Implementation of Priority Queue
    - Unsorted Array
        - Allows insertion in constant time
        - Finding the minimum and deleting the minimum in linear time
            - This is because we have to check each of the elements
            - We can have a constant look up time of our minimum if we have another pointer to keep track
              of the current min.
                - if the user needs the minimum value, we can return this variable
                - When the user removes the minimum value, we need to search through the array again to find the min
    - Sorted Array
        - Allows insertion in linear time
            - We may need to shift elements over when adding elements
            - We may need to move elements to fill in empty spots when removing element
        - Allows finding/deleting minimum in constant time
            - The element will either be at the beginning or at the end of the array
    - Balanced tree
        - Allows insertion/deletion to take O(logn)
            - insertion to the right most position in our lowest depth
                - then bubble upward
            - deletion of our root element
                - swap our root element with the leftmost node in our lower depth
                - then bubble downward
        - Allows searching for minimum element in constant time
            - our root element